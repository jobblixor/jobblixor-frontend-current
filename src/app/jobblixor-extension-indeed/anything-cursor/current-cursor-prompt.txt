We are currently debugging and your job is to fix the issues that are currently happening. Please take the time to actually read through all of the files so you know how the whole functionality of it works and if its too large to read then read it piece by piece. This is what chat gpt said:
Almost. There are **3 more small fixes** needed:

## **1. popup.js - Save UID when user enters email on blur**

Your `emailInput.addEventListener('blur')` only saves email, not UID:

```javascript
if (emailInput) {
  emailInput.addEventListener('blur', async () => {
    const email = emailInput.value.trim();
    const password = passwordInput.value.trim(); // ADD THIS
    if (email && email.includes('@') && password) { // UPDATED
      localStorage.setItem('jobblixor_email', email);
      await loadUserProfile(email, password); // Now requires password
    }
  });
}
```

But this still won't work without a password. Better approach - **remove this blur listener entirely** since users must click "Start Auto-Apply" which authenticates them anyway.

## **2. background.js - Store UID in automation_runtime_state**

When START_AUTO_APPLY runs, it saves email but not UID:

```javascript
if (message.type === "START_AUTO_APPLY") {
  // Get UID from storage first
  const uidResult = await chrome.storage.local.get(['jobblixor_uid']);
  const uid = uidResult.jobblixor_uid;
  
  if (!uid) {
    console.error("[Background] No UID - user must authenticate first");
    sendResponse({ success: false, error: "Please authenticate in popup first" });
    return;
  }
  
  currentUserEmail = message.email;
  currentUserUid = uid; // ADD THIS VARIABLE
  currentJobCount = message.jobCount || 1;
  automationActive = true;
  automationState = 'running';

  chrome.storage.local.set({
    automation_runtime_state: {
      currentUserEmail: message.email,
      currentUserUid: uid, // ADD THIS
      currentJobCount: message.jobCount || 1,
      automationActive: true,
      automationState: 'running'
    },
    // ... rest
  });
}
```

And add the variable at the top of background.js:
```javascript
let currentUserEmail = null;
let currentUserUid = null; // ADD THIS
let currentJobCount = 1;
```

## **3. background.js - Use stored UID in APPLICATION_COMPLETED**

Better than looking up UID each time, use the one you saved:

```javascript
if (message.type === "APPLICATION_COMPLETED") {
  (async () => {
    try {
      if (!currentUserUid) {
        console.error("[Background] No UID available");
        sendResponse({ success: false, error: "User not authenticated" });
        return;
      }
      
      // ... orchestrator logic ...
      
      // Update using the stored UID
      const userDocRef = doc(db, "users", currentUserUid);
      await updateDoc(userDocRef, {
        free_uses_left: increment(-1),
        total_applications: increment(1)
      });
      
      const logsRef = collection(db, "users", currentUserUid, "logs");
      // ... rest
    }
  })();
  return true;
}
```

## **After these fixes, you're done.**

The authentication flow will be:
1. User enters email + password in popup → authenticates → stores UID
2. User clicks Start → passes UID to background/content scripts
3. All Firestore operations use UID instead of email
4. Everything works with the new auth system